#-------------------------调用函数
#用help（）可以用得到对应函数的用法
help(abs)

#--------------------------------定义函数
#返回的其实是tuple
#请定义一个函数quadratic(a, b, c)，接收3个参数，返回一元二次方程：
#ax2 + bx + c = 0的两个解。
#提示：计算平方根可以调用math.sqrt()函数：
import math

a = float(input('a='))
b = float(input('b='))
c = float(input('c='))

def quadratic(a,b,c):
	if a == 0:              #把=当做赋值符号出现invalid syntax异常
		return '您的输入有误'
	elif b**2 -4*a*c == 0:
		x = -b/(2*a)
		return '方程的解为 %.2f' %x
	elif b**2 - 4*a*c > 0:
		x1 = (-b+math.sqrt(b**2-4*a*c))/(2*a)
		x2 = (-b-math.sqrt(b**2-4*a*c))/(2*a)
		return '该方程的解为 %.2f %.2f'%(x1,x2)  #保留小数点后两位精度
	else:
		return '该方程无解。'
print('%s' %quadratic(a,b,c))

#---------------------------函数参数
#位置参数   pow(x)

#默认参数   pow(x,n=2)
#规定：1.位置参数在前，默认参数在后（怕产生歧义）
#      2.变化大的参数在前，变化小的参数在后（默认参数在后）

#可变参数  calc(*number) 执行时calc(1,2,3)  *args
#定义可变参数和定义一个list和tuple相比，仅仅在参数前面加了一个*号。在函数内部，参数number收到的是一个tuple


#关键字参数  def person(name,age,**kw)
#关键字参数在函数内部自动组装成为一个dict,在用户注册时可选项功能有用到

#命名关键字 *作为分隔符，当前面有可变参数时就不再需要这个分隔符了
#与关键字的差别在于，命名关键字可以限制关键字参数名



#--------------------------------------递归函数
#使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。
#针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。
#Python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。
# 利用递归函数移动汉诺塔: 
# 原理：move(n, 'A', 'B', 'C')，n个盘子从a柱（借助b）移到c柱。。。。。本题是3个盘子
def move(n, a, b, c):
    if n == 1:
        print('move', a, '-->', c)
    else:
    	move(n-1, a, c, b)
    	print('move', a, '-->', c)
    	move(n-1, b, a, c)

move(3, 'A', 'B', 'C')